openapi: 3.0.3
info:
  title: Tapis Workflows API
  description: Create and manage pipelines
  version: '0.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Workflows API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8000/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.tapis.io/'
    description: Development environment
    variables: {}
  - url: 'https://raw.githubusercontent.com'
security:
  - TapisJWT: []
tags:
  - name: Workflows
    description: Manage Pipeline and Action resources. Create, retrieve, update, etc.
  - name: General
    description: General service health and readiness
  - name: Groups
    description: Manage groups that have access to specific workflow resources. Create, retrieve, update, etc.
  - name: Users
    description: Manage users that belong to groups. Create, update, remove, etc.
  - name: Identities
    description: Manage external identities . Create, retrieve, delete.
  - name: Pipelines
    description: Manage collections of actions. Create, retrieve and delete.
  - name: Actions
    description: Manage tasks to be executed as part of a workflow. Create, retrieve and delete.
  - name: Events
    description: Trigger workflows. Create and retrieve.
  - name: CI/CD
    description: Create CI/CD-specific workflows (Image builds and webhook notifications).

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------

# -- Paths for groups ---
paths:
  '/v3/workflows/pipelines/{pipeline_id}/changeOwner/{username}':
    patch:
      tags:
        - Pipelines
      summary: Change pipeline owner
      description: |
        Change the owner of a pipeline. Requesting user must be the current owner
      operationId: changePipelineOwner
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResp'

  '/v3/workflows/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResp'
        '500':
          description: Server error.
  '/v3/workflows/readycheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: readyCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResp'
        '500':
          description: Server error.
          
  '/v3/workflows/groups/':
    get:
      tags:
        - Groups
      summary: Retrieve groups
      description: |
        Retrieve all groups to which the user belongs
      operationId: listGroups
      responses:
        '200':
          description: List groups successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
    post:
      tags:
        - Groups
      summary: Create a group
      description: |
        Create a group that perform CRUD operations on workflow resources.

        The owner of the group will be made an admin by default. If you want to set other users as admins,
        you must use the '' endpoint.
      operationId: createGroup
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPostReq'
      responses:
        '201':
          description: Group created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUrlResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '409':
          description: Conflict. Group with provided id already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  '/v3/workflows/groups/{group_id}':
    get:
      tags:
        - Groups
      summary: Retrieve group details
      description: |
        Retrieve details for a given group id
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: getGroup
      responses:
        '200':
          description: Get group successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDetailResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  '/v3/workflows/groups/{group_id}/users/':
    get:
      tags:
        - Users
      summary: List users
      description: |
        List users.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: listGroupUsers
      responses:
        '200':
          description: List Users successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserListResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
    post:
      tags:
        - Users
      summary: Add a user to a group
      description: |
        Add a user to a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: addGroupUser
      requestBody:
        required: true
        description: A JSON object specifying.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUserPostReq'
      responses:
        '200':
          description: Users successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot add a user to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  '/v3/workflows/groups/{group_id}/users/{username}':
    get:
      tags:
        - Users
      summary: Get group user
      description: |
        Get a user from a group
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      operationId: getGroupUser
      responses:
        '200':
          description: Get Group User successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
    patch:
      tags:
        - Users
      summary: Update group user
      description: |
        Update a user for a specified group. Only group admins can perform this operation.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      requestBody:
        required: true
        description: A JSON object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUserPutPatchReq'
      operationId: updateGroupUser
      responses:
        '200':
          description: User updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot update user permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group or user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
    delete:
      tags:
        - Users
      summary: Remove user from group
      description: |
        Remove a user from a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      operationId: removeGroupUser
      responses:
        '200':
          description: User removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot remove a user to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  # --- Paths for identities ---
  '/v3/workflows/identities/':
    post:
      tags:
        - Identities
      summary: Create an identity
      description: |
        Create a mapping between a group user and an external identity.

        Users can only create identities for themselves. i.e., group admins and owners cannot
        create identities for any user but themselves.
      operationId: createIdentity
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUrlResp'
      responses:
        '201':
          description: Identity created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '409':
          description: Conflict. An identity already exists for this group and type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
    get:
      tags:
        - Identities
      summary: List user identities for a given user
      description: |
        Retrieve identities for the requesting user
      operationId: listIdentities
      responses:
        '200':
          description: List identities successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityListResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  '/v3/workflows/identities/{identity_uuid}':
    delete:
      tags:
        - Identities
      summary: Remove an identity
      description: |
        Remove an identitiy
      parameters:
        - name: identity_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: removeIdentity
      responses:
        '200':
          description: Identity removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot remove identities for users for this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        
    get:
      tags:
        - Identities
      summary: Get identity
      description: |
        Get a specific identity by its UUID
      operationId: getIdentity
      responses:
        '200':
          description: List identities successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  # --- Paths for ci pipelines -----------------------------------------------------
  '/v3/workflows/ci/':
    post:
      tags:
        - CI/CD
      summary: Create a CI/CD pipeline
      description: |
        Create a CI/CD pipeline using a request body. Pipeline id must be unique within a group and can be composed of
        alphanumeric characters and the following special characters [-_.].

        Note: When creating pipelines for the CI/CD use case(primarily building images), use this endpoint. It offers a simplified interface
        for those who want to avoid the complexities of creating a standard workflow. This pipeline's
        actions may be modified later.
      operationId: createCIPipeline
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIPipelinePostReq'
      responses:
        '201':
          description: Pipeline created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUrlResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot create a pipeline for specified group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  # --- Paths for pipelines -----------------------------------------------------
  '/v3/workflows/pipelines/':
    get:
      tags:
        - Pipelines
      summary: Retrieve pipelines
      description: Retrieve a list of pipelines for all groups that the requesting user belongs to.
      operationId: listPipelines
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineListResp'
                  
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '409':
          description: Conflict. Pipeline already exists with provided id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
    post:
      tags:
        - Pipelines
      summary: Create a pipeline
      description: |
        Create a pipeline using a request body. Pipeline id must be unique within a group and can be composed of
        alphanumeric characters and the following special characters [-_.].
      operationId: createPipeline
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUrlResp'
      responses:
        '200':
          description: Pipeline created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIPipelineResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '403':
          description: Cannot create a pipeline for specified group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  '/v3/workflows/pipelines/{pipeline_id}':
    get:
      tags:
        - Pipelines
      summary: Retrieve pipeline details
      description: |
        Retrieve information for a pipeline given the pipeline id
      operationId: getPipeline
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Pipeline found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineResp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '404':
          description: Pipeline not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResp'

  '/v3/workflows/pipelines/{pipeline_id}/actions':
    get:
      tags:
        - Actions
      summary: List actions
      description: |
        Retrieve all actions for a given pipeline
      operationId: listActions
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Actions found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionListResp'

  '/v3/workflows/pipelines/{pipeline_id}/actions/{action_id}':
    get:
      tags:
        - Actions
      summary: Retrieve action details
      description: |
        Retrieve action details for given pipeline id and action id
      operationId: getAction
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: action_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Action found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResp'

  '/v3/workflows/pipelines/{pipeline_id}/events':
    get:
      tags:
        - Events
      summary: Retrieve Event details
      description: |
        Retrieve all events for a given pipeline
      operationId: listEvents
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Events found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResp'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-TAPIS-TOKEN
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    
    # --- Pipelines ---
    CIPipeline:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        group:
          $ref: '#/components/schemas/ID'
        owner:
          $ref: '#/components/schemas/Username'
        uuid:
          type: string
          format: uuid
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ImageBuildAction'

    Pipeline:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        group:
          $ref: '#/components/schemas/ID'
        owner:
          $ref: '#/components/schemas/Username'
        uuid:
          type: string
          format: uuid
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'

    # --- Action ---
    Action:
      type: object
      properties:
        id:
          type: string
      oneOf:
        - $ref: '#/components/schemas/ImageBuildAction'
        - $ref: '#/components/schemas/WebhookNotificationAction'
        - $ref: '#/components/schemas/ContainerRunAction'
        - $ref: '#/components/schemas/TapisJobAction'
        - $ref: '#/components/schemas/TapisActorAction'
    
    BaseAction:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/ActionTypeEnum'
        depends_on:
          type: array
          items:
            $ref: '#/components/schemas/ActionDependency'
        description:
          type: string
          default: null
        input:
          type: object
          default: null
        output:
          type: object
          default: null
        retries:
              type: integer
              default: 0
        ttl:
          type: integer
          default: -1

    ImageBuildAction:
      allOf:
        - $ref: '#/components/schemas/BaseAction'
        - type: object
          properties:
            auto_build:
              type: object
              default: false
            builder:
              allOf:
                - $ref: '#/components/schemas/BuilderEnum'
                - default: "kaniko"
            cache:
              type: boolean
              default: true
            context:
              $ref: '#/components/schemas/Context'
            destination: 
              $ref: '#/components/schemas/Destination'
            type:
              default: "image_build"

    WebhookNotificationAction:
      allOf:
        - $ref: '#/components/schemas/BaseAction'
        - type: object
          properties:
            auth:
              type: object
              default: null
            data:
              type: object
              default: null
            headers:
              type: object
              default: null
            http_method:
              allOf:
                - $ref: '#/components/schemas/HTTPMethodEnum'
                - default: null
            query_params:
              type: object
              default: null
            type:
              default: "webhook_notification"
            url:
              type: string
              default: null

    ContainerRunAction:
      allOf:
        - $ref: '#/components/schemas/BaseAction'
        - type: object
          properties:
            image:
              type: string
            type:
              default: "container_run"

    TapisJobAction:
      allOf:
        - $ref: '#/components/schemas/BaseAction'
        - type: object
          properties:
            poll:
              type: boolean
              default: true
            tapis_job_def:
              type: object
            type:
              default: "tapis_job_action"

    TapisActorAction:
      allOf:
        - $ref: '#/components/schemas/BaseActionReq'
        - type: object
          properties:
            poll:
              type: boolean
              default: true
            tapis_actor_id:
              type: string
              default: null
            type:
              default: "tapis_actor_action"

    # --- Action Dependency ---
    ActionDependency:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        can_fail:
          type: boolean
        
    # --- Context ---
    Context:
      type: object
      properties:
        branch:
          type: string
        credentials:
          default: null
        dockerfile_path:
          type: string
        sub_path:
          type: string
        type:
          $ref: "#/components/schemas/ContextTypeEnum"
        url:
          type: string
        visibility:
          $ref: "#/components/schemas/ContextVisibilityEnum"
    
    # --- Destination ---
    Destination:
      type: object
      properties:
        credentials:
          default: null
        tag: 
          type: string
        type:
          $ref: '#/components/schemas/DestinationTypeEnum'
        url:
          type: string

    # --- Group and GroupUser ---
    GroupDetail:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        owner:
          $ref: "#/components/schemas/Username"
        uuid:
          type: string
          format: uuid
        users:
          type: array
          items:
            $ref: "#/components/schemas/GroupUser"

    Group:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        owner:
          $ref: "#/components/schemas/Username"
        uuid:
          type: string
          format: uuid

    GroupUser:
      type: object
      properties:
        group:
          $ref: "#/components/schemas/ID"
        username:
          $ref: "#/components/schemas/Username"
        is_admin:
          type: boolean
        uuid:
          type: string
          format: uuid

    Identity:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ID"
        name:
          type: string
        description:
          type: string
        owner:
          $ref: "#/components/schemas/Username"
        uuid:
          type: string
          format: uuid
        credentials:
          type: string

    Event:
      type: object
      properties:
        branch:
          type: string
          default: null
        commit:
          type: string
          default: null
        commit_sha:
          type: string
          default: null
        context_url:
          type: string
          default: null
        directives:
          type: string
        message:
          type: string
        pipeline:
          type: string
        source:
          type: string
        username:
          $ref: '#/components/schemas/Username'
        identity:
          type: string
          default: null
        uuid:
          type: string
          format: uuid

    # --- String types with constraints ------------------------------------
    ID:
      type: string
      minLength: 1
      maxLength: 128
    Username:
      type: string
      minLength: 1
      maxLength: 64
    DescriptionString:
      type: string
      maxLength: 2048

    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    GroupPostReq:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ID'
        users:
          type: array
          items:
            type: object
            properties:
              username:
                $ref: '#/components/schemas/Username'
              is_admin:
                default: false
                type: boolean

    GroupUserPostReq:
      type: object
      required:
        - username
      properties:
        username:
          $ref: '#/components/schemas/Username'
        is_admin:
          type: boolean
          default: false

    GroupUserPutPatchReq:
      type: object
      required:
        - is_admin
      properties:
        is_admin:
          type: boolean

    IdentityPostReq:
      type: object
      required:
        - type
      properties:
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/IdentityTypeEnum'
        credentials:
          oneOf:
            - $ref: "#/components/schemas/GithubAuthReq"
            - $ref: "#/components/schemas/DockerhubAuthReq"
          
    GithubAuthReq:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        personal_access_token:
          type: string

    DockerhubAuthReq:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        token:
          type: string

    PipelinePostReq:
      type: object
      required:
        - id
        - type
        - group_id
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          $ref: '#/components/schemas/DescriptionString'
        type:
          $ref: '#/components/schemas/PipelineTypeEnum'
        actions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/ImageBuildActionReq'
              - $ref: '#/components/schemas/WebhookNotificationActionReq'
              - $ref: '#/components/schemas/ContainerRunActionReq'
              - $ref: '#/components/schemas/TapisJobActionReq'
              - $ref: '#/components/schemas/TapisActorActionReq'

    BaseActionReq:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/ActionTypeEnum'
        depends_on:
          type: array
          items:
            $ref: '#/components/schemas/ActionDependency'
        description:
          type: string
          default: null
        input:
          type: object
          default: null
        output:
          type: object
          default: null
        retries:
              type: integer
              default: 0
        ttl:
          type: integer
          default: -1

    ImageBuildActionReq:
      allOf:
        - $ref: '#/components/schemas/BaseActionReq'
        - type: object
          properties:
            auto_build:
              type: object
              default: false
            builder:
              $ref: '#/components/schemas/BuilderEnum'
              default: "kaniko"
            cache:
              type: boolean
              default: true
            context:
              $ref: '#/components/schemas/ContextReq'
            destination: 
              $ref: '#/components/schemas/DestinationReq'
            type:
              default: "image_build"

    WebhookNotificationActionReq:
      allOf:
        - $ref: '#/components/schemas/BaseActionReq'
        - type: object
          properties:
            auth:
              type: object
              default: null
            data:
              type: object
              default: null
            headers:
              type: object
              default: null
            http_method:
              $ref: '#/components/schemas/HTTPMethodEnum'
              default: null
            query_params:
              type: object
              default: null
            type:
              default: "webhook_notification"
            url:
              type: string
              default: null

    ContainerRunActionReq:
      allOf:
        - $ref: '#/components/schemas/BaseActionReq'
        - type: object
          properties:
            image:
              type: string
            type:
              default: "container_run"

    TapisJobActionReq:
      allOf:
        - $ref: '#/components/schemas/BaseActionReq'
        - type: object
          properties:
            poll:
              type: boolean
              default: true
            tapis_job_def:
              $ref: '#/components/schemas/TapisJobDefReq'
            type:
              default: "tapis_job_action"

    TapisActorActionReq:
      allOf:
        - $ref: '#/components/schemas/BaseActionReq'
        - type: object
          properties:
            poll:
              type: boolean
              default: true
            tapis_actor_id:
              type: string
              default: null
            type:
              default: "tapis_actor_action"
        
    CIPipelinePostReq:
      type: object
      required:
        - id
        - type
        - group_id
        - context
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          $ref: '#/components/schemas/DescriptionString'
        type:
          $ref: '#/components/schemas/PipelineTypeEnum'
        context:
          $ref: '#/components/schemas/ContextReq'
        destination:
          $ref: '#/components/schemas/DestinationReq'

    # --- Context ---
    ContextReq:
      type: object
      required:
        - visibility
        - url
        - type
        - dockerfile_path
      properties:
        branch:
          type: string
        credentials:
          $ref: "#/components/schemas/ContextCredentialsReq"
        dockerfile_path:
          type: string
        identity_uuid:
          type: string
          format: uuid
        sub_path:
          type: string
        type:
          $ref: "#/components/schemas/ContextTypeEnum"
        url:
          type: string
        visibility:
          $ref: "#/components/schemas/ContextVisibilityEnum"

    # --- Credentials ---
    ContextCredentialsReq:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
      
    # --- Destination ---
    DestinationReq:
      type: object
      required:
        - credentials
        - url
        - type
      properties:
        credentials:
          $ref: '#/components/schemas/DestinationCredentialsReq'
        identity_uuid:
          type: string
          format: uuid
        tag: 
          type: string
        type:
          $ref: '#/components/schemas/DestinationTypeEnum'
        url:
          type: string

    DestinationCredentialsReq:
      type: object
      properties:
        token:
          type: string
        username:
          type: string

    TapisJobDefReq:
      $ref: "https://raw.githubusercontent.com/tapis-project/tapis-client-java/prod/jobs-client/src/main/resources/JobsAPI.yaml#components/schemas/ReqSubmitJob"

    EventPostReq:
      type: object
      properties:
        directives:
          type: array
          items:
            type: string

    WebhookEventPostReq:
      type: object
      properties:
        branch:
          type: string
        commit:
          type: string
        commit_sha:
          type: string
        source:
          $ref: '#/components/schemas/ContextTypeEnum'
        context_url:
          type: string
        username:
          type: string

    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    ResourceUrlResp:
      type: object
      properties:
        success:
          type: boolean
          default: true
        status:
          type: integer
          default: 201
        message:
          type: string
          default: 'created'
        result:
          $ref: '#/components/schemas/ResourceUrlResult'

    ResourceUrlResult:
      type: object
      properties:
        url:
          type: string

    ObjectResp:
      type: object
      properties:
        success:
          type: boolean
          default: true
        status:
          type: integer
          default: 200
        message:
          type: string
        result:
          type: object

    ListResp:
      type: object
      properties:
        success:
          type: boolean
          default: true
        status:
          type: integer
          default: 200
        message:
          type: string
        result:
          type: array
          items:
            type: object

    ErrorResp:
      type: object
      properties:
        success:
          type: boolean
          default: false
        status:
          type: integer
          default: 500
        message:
          type: string
        result:
          type: object

    GroupDetailResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            success:
              type: boolean
            status:
              type: integer
            message:
              type: string
            result:
              $ref: '#/components/schemas/GroupDetail'

    GroupUserResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            success:
              type: boolean
            status:
              type: integer
            message:
              type: string
            result:
              $ref: '#/components/schemas/GroupUser'
    
    GroupUserListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            success:
              type: boolean
            status:
              type: integer
            message:
              type: string
            result:
              type: array
              items:
                $ref: '#/components/schemas/GroupUser'

    GroupResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Group'

    GroupListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Group'
    
    IdentityResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Identity'
    
    IdentityListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Identity'

    PipelineResp:
      type: object
      properties:
        success:
          type: boolean
        status:
          type: integer
        message:
          type: string
        result:
          $ref: '#/components/schemas/Pipeline'

    CIPipelineResp:
      type: object
      properties:
        success:
          type: boolean
        status:
          type: integer
        message:
          type: string
        result:
          $ref: '#/components/schemas/CIPipeline'

    PipelineListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Pipeline'
    
    ActionResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Action'

    ActionListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp' 
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Action'

    EventResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Event'

    EventListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp' 
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Event'

    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    PipelineTypeEnum:
      type: string
      enum:
        - workflow
        - ci

    ActionTypeEnum:
      type: string
      enum:
        - image_build
        - container_run
        - webhook_notification
        - tapis_job
        - tapis_actor

    BuilderEnum:
      type: string
      enum:
        - kaniko
        - singularity

    ContextVisibilityEnum:
      type: string
      enum:
        - private
        - public

    ContextTypeEnum:
      type: string
      enum:
        - github
        - gitlab

    DestinationTypeEnum:
      type: string
      enum:
        - dockerhub
    
    HTTPMethodEnum:
      type: string
      enum:
        - get
        - post
        - put
        - patch
        - delete

    IdentityTypeEnum:
      type: string
      enum:
        - github
        - gitlab