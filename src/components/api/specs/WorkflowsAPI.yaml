openapi: 3.0.3
info:
  title: Tapis Workflows API
  description: Create and manage pipelines
  version: '0.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Workflows API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8000/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: Workflows
    description: Manage Pipeline and Action resources. Create, retrieve, update, etc.
  - name: General
    description: General service health and readiness
  - name: Groups
    description: Manage groups that have access to specific workflow resources. Create, retrieve, update, etc.
  - name: Group Users
    description: Manage users that belong to groups. Create, update, remove, etc.
  - name: Identities
    description: Manage external identities . Create, retrieve, delete.
  - name: Pipelines
    description: Manage collections of actions. Create, retrieve and delete.
  - name: Actions
    description: Manage tasks to be executed as part of a workflow. Create, retrieve and delete.
  - name: Events
    description: Trigger workflows. Create and retrieve.
  - name: CI/CD
    description: Create CI/CD-specific workflows (Image builds and webhook notifications).

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------

# -- Paths for groups ---
paths:
  '/v3/workflows/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResp'
        '500':
          description: Server error.
  '/v3/workflows/groups/':
    get:
      tags:
        - Groups
      summary: Retrieve groups
      description: |
        Retrieve all groups to which the user belongs
      operationId: listGroups
      responses:
        '200':
          description: List groups successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Groups
      summary: Create a group
      description: |
        Create a group that perform CRUD operations on workflow resources.

        The owner of the group will be made an admin by default. If you want to set other users as admins,
        you must use the '' endpoint.
      operationId: createGroup
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPostReq'
      responses:
        '200':
          description: Group created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict. Group with provided id already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}':
    get:
      tags:
        - Groups
      summary: Retrieve group details
      description: |
        Retrieve details for a given group id
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: getGroup
      responses:
        '200':
          description: Get group successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDetailResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/users/':
    get:
      tags:
        - Groups Users
      summary: List group users
      description: |
        List group users.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: listGroupUsers
      responses:
        '200':
          description: List Group Users successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserListResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Groups Users
      summary: Add a user to a group
      description: |
        Add a user to a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: addGroupUser
      requestBody:
        required: true
        description: A JSON object specifying.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUserPostReq'
      responses:
        '200':
          description: Group users successfully retried.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot add a user to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/users/{username}':
    get:
      tags:
        - Groups Users
      summary: Get group user
      description: |
        Get a user from a group
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      operationId: getGroupUser
      responses:
        '200':
          description: Get Group User successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    patch:
      tags:
        - Groups Users
      summary: Update group user
      description: |
        Update a user for a specified group
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      requestBody:
        required: true
        description: A JSON object specifying.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUserPatchReq'
      operationId: updateGroupUser
      responses:
        '200':
          description: User perms updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot update user permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group or user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    delete:
      tags:
        - Groups Users
      summary: Remove user from group
      description: |
        Remove a user from a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      operationId: removeGroupUser
      responses:
        '200':
          description: User removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserResp'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot remove a user to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  # --- Paths for identities ---
  '/v3/workflows/identities/{group_id}':
    get:
      tags:
        - Identities
      summary: List user identities for a given group
      description: |
        Retrieve user identities for a given group id
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: listIdentities
      responses:
        '200':
          description: List identities successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityListResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/identities/{group_id}/{username}':
    get:
      tags:
        - Identities
      summary: Get identity for a given group user
      description: |
        Get identity for a given group user
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: getIdentity
      responses:
        '200':
          description: Get identity successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResp'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group or User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        

  # --- Paths for ci pipelines -----------------------------------------------------
  '/v3/workflows/ci/':
    post:
      tags:
        - CI/CD
      summary: Create a CI/CD pipeline
      description: |
        Create a CI/CD pipeline using a request body. Pipeline id must be unique within a group and can be composed of
        alphanumeric characters and the following special characters [-_.].

        Note: When creating pipelines for the CI/CD use case(primarily building images), use this endpoint. It offers a simplified interface
        for those who want to avoid the complexities of creating a standard workflow. You made modfiy this
        pipeline's actions later.
      operationId: createCIPipeline
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIPipelinePostReq'
      responses:
        '200':
          description: Pipeline created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipeline'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot create a pipeline for specified group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  # --- Paths for pipelines -----------------------------------------------------
  '/v3/workflows/pipelines/':
    get:
      tags:
        - Pipelines
      summary: Retrieve pipelines
      description: Retrieve a list of pipelines for all groups that the requesting user belongs to.
      operationId: listPipelines
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineList'
                  
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict. Pipeline already exists with provided id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Pipelines
      summary: Create a pipeline
      description: |
        Create a pipeline using a request body. Pipeline id must be unique within a group and can be composed of
        alphanumeric characters and the following special characters [-_.].
      operationId: createPipeline
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelinePostReq'
      responses:
        '200':
          description: Pipeline created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipeline'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot create a pipeline for specified group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/pipelines/{pipeline_id}':
    get:
      tags:
        - Pipelines
      summary: Retrieve pipeline details
      description: |
        Retrieve information for a pipeline given the pipeline id
      operationId: getPipeline
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipeline'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/pipelines/{pipeline_id}/changeOwner/{username}':
    patch:
      tags:
        - Pipelines
      summary: Change pipeline owner
      description: |
        Change the owner of a pipeline. Requesting user must be the current owner
      operationId: changePipelineOwner
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResp'


  '/v3/workflows/pipelines/{pipeline_id}/actions':
    get:
      tags:
        - Actions
      summary: List actions
      description: |
        Retrieve all actions for a given pipeline
      operationId: listActions
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResp'

  '/v3/workflows/pipelines/{pipeline_id}/actions/{action_id}':
    get:
      tags:
        - Actions
      summary: Retrieve action details
      description: |
        Retrieve all actions details for given pipeline id and action name
      operationId: getAction
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: action_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResp'

  '/v3/workflows/pipelines/{pipeline_id}/events':
    get:
      tags:
        - Events
      summary: Retrieve Event details
      description: |
        Retrieve all events for a given pipeline
      operationId: listEvents
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: action_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResp'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-TAPIS-TOKEN
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    # --- Pipelines ---
    Pipeline:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          $ref: '#/components/schemas/DescriptionString'
        type:
          $ref: '#/components/schemas/PipelineTypeEnum'
        group_id:
          $ref: '#/components/schemas/ID'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        uuid:
          type: string
          format: uuid
        owner:
          type: string
        created_at:
          type: string
        updated_at:
          type: string

    PipelineDetails:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        group:
          $ref: '#/components/schemas/ID'
        owner:
          $ref: '#/components/schemas/Username'
        uuid:
          type: string
          format: uuid
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'

    # --- Action ---
    Action:
      type: object
      properties:
        id:
          type: string
        auth:
          type: object
        auto_build:
          type: object
        builder:
          $ref: '#/components/schemas/BuilderEnum'
        cache:
          type: boolean
        context:
          $ref: '#/components/schemas/Context'
        data:
          type: object
        description:
          type: string
        destination: 
          $ref: '#/components/schemas/Destination'
        headers:
          type: object
        http_method:
          type: string
        image:
          type: string
        input:
          type: object
        output:
          type: string
        poll:
          type: boolean
        query_params:
          type: object
        type:
          $ref: '#/components/schemas/ActionTypeEnum'
        depends_on:
          type: array
          items:
            $ref: '#/components/schemas/ActionDependency'
        retries:
          type: integer
        tapis_actor_id:
          type: string
        tapis_job_def:
          type: object
        ttl:
          type: integer
        url:
          type: string

    ActionResp:
      type: object
      properties:
        id:
          type: string
        auth:
          type: object
        auto_build:
          type: object
        builder:
          $ref: '#/components/schemas/BuilderEnum'
        cache:
          type: boolean
        context:
          type: integer
        data:
          type: object
        description:
          type: string
        destination: 
          type: integer
        headers:
          type: object
        http_method:
          type: string
        image:
          type: string
        input:
          type: object
        output:
          type: string
        poll:
          type: boolean
        query_params:
          type: object
        type:
          $ref: '#/components/schemas/ActionTypeEnum'
        depends_on:
          type: array
          items:
            $ref: '#/components/schemas/ActionDependency'
        retries:
          type: integer
        tapis_actor_id:
          type: string
        tapis_job_def:
          type: object
        ttl:
          type: integer
        url:
          type: string

    ActionDetails:
      type: object
      properties:
        id:
          type: string
        auth:
          type: object
        auto_build:
          type: object
        builder:
          $ref: '#/components/schemas/BuilderEnum'
        cache:
          type: boolean
        context:
          $ref: '#/components/schemas/Context'
        data:
          type: object
        description:
          type: string
        destination: 
          $ref: '#/components/schemas/Destination'
        headers:
          type: object
        http_method:
          type: string
        image:
          type: string
        input:
          type: object
        output:
          type: string
        poll:
          type: boolean
        query_params:
          type: object
        type:
          $ref: '#/components/schemas/ActionTypeEnum'
        depends_on:
          type: array
          items:
            $ref: '#/components/schemas/ActionDependency'
        retries:
          type: integer
        tapis_actor_id:
          type: string
        tapis_job_def:
          type: object
        ttl:
          type: integer
        url:
          type: string

    # --- Action Dependency ---
    ActionDependency:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        can_fail:
          type: boolean
        
    # --- Context ---
    Context:
      type: object
      properties:
        branch:
          type: string
        credential:
          $ref: "#/components/schemas/ContextCredential"
        dockerfile_path:
          type: string
        sub_path:
          type: string
        type:
          $ref: "#/components/schemas/ContextTypeEnum"
        url:
          type: string
        visibility:
          $ref: "#/components/schemas/ContextVisibilityEnum"

    # --- Credentials ---
    ContextCredential:
      type: object
      properties:
        token:
          type: string
        username:
          type: string 

    DestinationCredential:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
    
    # --- Destination ---
    Destination:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/DestinationCredential'
        tag: 
          type: string
        type:
          $ref: '#/components/schemas/DestinationTypeEnum'
        url:
          type: string

    # --- Group and GroupUser ---
    GroupDetail:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        owner:
          $ref: "#/components/schemas/Username"
        uuid:
          type: string
          format: uuid
        users:
          type: array
          items:
            $ref: "#/components/schemas/GroupUser"

    Group:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        owner:
          $ref: "#/components/schemas/Username"
        uuid:
          type: string
          format: uuid

    GroupUser:
      type: object
      properties:
        group:
          $ref: "#/components/schemas/ID"
        username:
          $ref: "#/components/schemas/Username"
        is_admin:
          type: boolean
        uuid:
          type: string
          format: uuid

    Identity:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ID"
        username:
          $ref: "#/components/schemas/Username"
        group:
          type: string
        uuid:
          type: string
          format: uuid
        value:
          type: string

    # --- String types with constraints ------------------------------------
    ID:
      type: string
      minLength: 1
      maxLength: 128
    Username:
      type: string
      minLength: 1
      maxLength: 64
    DescriptionString:
      type: string
      maxLength: 2048

    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    GroupPostReq:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ID'
        users:
          type: array
          items:
            $ref: '#/components/schemas/Username'

    GroupUserPostReq:
      type: object
      required:
        - username
      properties:
        username:
          $ref: '#/components/schemas/Username'
        is_admin:
          type: boolean

    GroupUserPatchReq:
      type: object
      properties:
        is_admin:
          type: boolean

    IdentityPostReq:
      type: object
      required:
        - type
        - username
        - value
      properties:
        type:
          $ref: '#/components/schemas/IdentityTypeEnum'
        username:
          $ref: '#/components/schemas/Username'
        value:
          type: string

    PipelinePostReq:
      type: object
      required:
        - id
        - type
        - group_id
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          $ref: '#/components/schemas/DescriptionString'
        type:
          $ref: '#/components/schemas/PipelineTypeEnum'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        run_on_create:
          type: boolean
          default: false

    CIPipelinePostReq:
      type: object
      required:
        - id
        - type
        - group_id
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          $ref: '#/components/schemas/DescriptionString'
        type:
          $ref: '#/components/schemas/PipelineTypeEnum'
        context:
          $ref: '#/components/schemas/Context'
        destination:
          $ref: '#/components/schemas/Destination'
        run_on_create:
          type: boolean
          default: false

    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    ObjectResp:
      type: object
      properties:
        success:
          type: boolean
          default: true
        status:
          type: integer
          default: 200
        message:
          type: string
        result:
          type: object

    ListResp:
      type: object
      properties:
        success:
          type: boolean
          default: true
        status:
          type: integer
          default: 200
        message:
          type: string
        result:
          type: array
          items:
            type: object

    RespError:
      type: object
      properties:
        success:
          type: boolean
          default: false
        status:
          type: integer
          default: 500
        message:
          type: string
        result:
          type: object

    GroupDetailResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            success:
              type: boolean
            status:
              type: integer
            message:
              type: string
            result:
              $ref: '#/components/schemas/GroupDetail'

    GroupUserResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            success:
              type: boolean
            status:
              type: integer
            message:
              type: string
            result:
              $ref: '#/components/schemas/GroupUser'
    
    GroupUserListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            success:
              type: boolean
            status:
              type: integer
            message:
              type: string
            result:
              type: array
              items:
                $ref: '#/components/schemas/GroupUser'

    GroupResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Group'

    GroupListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Group'
    
    IdentityResp:
      allOf:
        - $ref: '#/components/schemas/ObjectResp'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Identity'
    
    IdentityListResp:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Identity'

    RespPipeline:
      type: object
      properties:
        success:
          type: boolean
        status:
          type: integer
        message:
          type: string
        result:
          $ref: '#/components/schemas/PipelineDetails'

    RespPipelineList:
      allOf:
        - $ref: '#/components/schemas/ListResp'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/PipelineDetails'

    ActionRespList:
      allOf:
        - $ref: '#/components/schemas/ListResp' 
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/ActionDetails'

    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    PipelineTypeEnum:
      type: string
      enum:
        - workflow
        - ci

    ActionTypeEnum:
      type: string
      enum:
        - image_build
        - container_run
        - webhook_notification
        - tapis_job
        - tapis_actor

    BuilderEnum:
      type: string
      enum:
        - kaniko

    ContextVisibilityEnum:
      type: string
      enum:
        - private
        - public

    ContextTypeEnum:
      type: string
      enum:
        - github
        - gitlab

    DestinationTypeEnum:
      type: string
      enum:
        - dockerhub

    IdentityTypeEnum:
      type: string
      enum:
        - github
        - gitlab